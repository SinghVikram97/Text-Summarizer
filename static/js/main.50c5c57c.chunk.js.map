{"version":3,"sources":["Components/Navbar/Navbar.js","Components/InputArea/InputArea.js","Components/SummarizedText/SummarizedText.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","onSubmit","x","document","getElementById","className","classList","add","react_default","a","createElement","id","href","onClick","this","Component","InputArea","state","inputText","numSentences","handleSubmit","event","preventDefault","_this","props","summarizeContent","handleChange","setState","Object","defineProperty","target","value","htmlFor","onChange","aria-describedby","type","name","SummarizedText","summary","App","text","console","log","fetch","method","headers","Content-Type","body","JSON","stringify","then","response","json","slice","length","Navbar_Navbar_Navbar","InputArea_InputArea_InputArea","SummarizedText_SummarizedText_SummarizedText","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4TAIqBA,+NACnBC,SAAS,WACP,IAAIC,EAAEC,SAASC,eAAe,YACb,WAAdF,EAAEG,UACHH,EAAEI,UAAUC,IAAI,cAEhBL,EAAEG,UAAU,kFAId,OACAG,EAAAC,EAAAC,cAAA,OAAML,UAAU,SAASM,GAAG,YAC1BH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,QAAQP,UAAU,QAA1B,qBACAG,EAAAC,EAAAC,cAAA,KAAGE,KAAK,WAAR,0BACAJ,EAAAC,EAAAC,cAAA,KAAGE,KAAK,QAAR,0BACAJ,EAAAC,EAAAC,cAAA,KAAGE,KAAK,sBAAsBP,UAAU,YAAYQ,QAASC,KAAKb,UAC/DO,EAAAC,EAAAC,cAAA,KAAGL,UAAU,wBAhBcU,qBCDfC,oNACnBC,MAAQ,CACNC,UAAW,GACXC,aAAc,QAGhBC,aAAe,SAAAC,GACbA,EAAMC,iBACNC,EAAKC,MAAMC,iBAAiBF,EAAKN,UAGnCS,aAAe,SAAAL,GACbE,EAAKI,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACGP,EAAMS,OAAOnB,GAAKU,EAAMS,OAAOC,iFAKlC,OACEvB,EAAAC,EAAAC,cAAA,OAAKL,UAAU,oBACbG,EAAAC,EAAAC,cAAA,QAAML,UAAU,eAAeJ,SAAUa,KAAKM,cAC5CZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOsB,QAAQ,UAAU3B,UAAU,eAAnC,WAGAG,EAAAC,EAAAC,cAAA,YACEuB,SAAUnB,KAAKY,aACff,GAAG,YACHN,UAAU,6EACV6B,mBAAiB,iBAEnB1B,EAAAC,EAAAC,cAAA,SAAOC,GAAG,eAAeN,UAAU,eAAnC,mEACmE,IACjEG,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAIP,UAAU,sCAAtB,SAIFG,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACEC,GAAG,eACHwB,KAAK,SACLC,KAAK,WACL/B,UAAU,gBACV4B,SAAUnB,KAAKY,gBAGnBlB,EAAAC,EAAAC,cAAA,UAAQL,UAAU,4EAAlB,mBA9C6BU,cCDlBsB,0LAEjB,OACE7B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGL,UAAU,WACVS,KAAKU,MAAMc,iBALsBvB,cC4C7BwB,6MAtCbtB,MAAQ,CACNqB,QAAS,MAGXb,iBAAmB,SAAAe,GACjB,IAAItB,EAAYsB,EAAKtB,UACjBC,EAAeqB,EAAKrB,aACxBsB,QAAQC,IAAIvB,GACZwB,MAAM,oDAAqD,CACzDC,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnB/B,UAAWA,EACXC,aAAcA,MAGf+B,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAZ,GACJA,EAAUA,EAAQe,MAAM,EAAGf,EAAQgB,OAAS,GAC5C/B,EAAKI,SAAS,CACZW,QAASA,+EAMf,OACE9B,EAAAC,EAAAC,cAAA,OAAKL,UAAU,YACbG,EAAAC,EAAAC,cAAC6C,EAAD,MACA/C,EAAAC,EAAAC,cAAC8C,EAAD,CAAW/B,iBAAkBX,KAAKW,mBAClCjB,EAAAC,EAAAC,cAAC+C,EAAD,CAAgBnB,QAASxB,KAAKG,MAAMqB,kBAjC1BvB,aCKE2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAAS9D,SAASC,eAAe,SD0H3C,kBAAmB8D,WACrBA,UAAUC,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC","file":"static/js/main.50c5c57c.chunk.js","sourcesContent":["import React, {\n  Component\n} from 'react'\nimport './Navbar.css'\nexport default class Navbar extends Component {\n  onSubmit=()=>{\n    let x=document.getElementById('myTopnav');\n    if(x.className==='topnav'){\n      x.classList.add('responsive')\n    }else{\n      x.className=\"topnav\"\n    }\n  }\n  render() {\n    return ( \n    < div className=\"topnav\" id=\"myTopnav\" >\n      <a href=\"#home\" className=\"home\">TextSummarization</a>\n      <a href=\"#online\">Text Summarizer Online</a>\n      <a href=\"#api\">Text Summarization Api</a>\n      <a href=\"javascript:void(0);\" className=\"icon last\" onClick={this.onSubmit}>\n         <i className=\"fa fa-bars\"></i>\n      </a>\n    </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport \"./InputArea.css\";\n\nexport default class InputArea extends Component {\n  state = {\n    inputText: \"\",\n    numSentences: null\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.props.summarizeContent(this.state);\n  };\n\n  handleChange = event => {\n    this.setState({\n      [event.target.id]: event.target.value\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"textArea ma5 mb0\">\n        <form className=\"pa4 black-80\" onSubmit={this.handleSubmit}>\n          <div>\n            <label htmlFor=\"comment\" className=\"f3 b db mb2\">\n              Content\n            </label>\n            <textarea\n              onChange={this.handleChange}\n              id=\"inputText\"\n              className=\"comment db border-box hover-black w-100 measure ba b--black-20 pa2 br2 mb2\"\n              aria-describedby=\"comment-desc\"\n            />\n            <small id=\"comment-desc\" className=\"f6 black-60\">\n              Enter the number of sentences you want to summarize content into{\" \"}\n              <a href=\"#\" className=\"link underline black-80 hover-blue\">\n                more\n              </a>\n            </small>\n            <br />\n            <input\n              id=\"numSentences\"\n              type=\"number\"\n              name=\"quantity\"\n              className=\"sentences ma3\"\n              onChange={this.handleChange}\n            />\n          </div>\n          <button className=\"ma2 b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\">\n            Submit\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react'\nimport './SummarizedText.css'\nexport default class SummarizedText extends Component {\n  render() {\n    return (\n      <div>\n        <p className=\"summary\">\n          {this.props.summary}\n        </p>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"../node_modules/tachyons\";\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport InputArea from \"./Components/InputArea/InputArea\";\nimport SummarizedText from \"./Components/SummarizedText/SummarizedText\";\n\nclass App extends Component {\n  state = {\n    summary: \"\"\n  };\n\n  summarizeContent = text => {\n    let inputText = text.inputText;\n    let numSentences = text.numSentences;\n    console.log(numSentences);\n    fetch(\"https://secret-temple-96441.herokuapp.com/summary\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        inputText: inputText,\n        numSentences: numSentences\n      })\n    })\n      .then(response => response.json())\n      .then(summary => {\n        summary = summary.slice(2, summary.length - 2);\n        this.setState({\n          summary: summary\n        });\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App pl-0\">\n        <Navbar />\n        <InputArea summarizeContent={this.summarizeContent} />\n        <SummarizedText summary={this.state.summary} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}